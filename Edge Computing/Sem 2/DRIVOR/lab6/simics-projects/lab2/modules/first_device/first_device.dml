/*
  Â© 2010 Intel Corporation
*/

// first_device.dml - Skeleton code to base new DML device modules on

dml 1.4;

device first_device;

param desc = "first_device";

param documentation = "It's me, first_device!";

import "utility.dml";

// USER-TODO: add connect definitions here, if needed

// USER-TODO: add attribute definitions here, if needed

// Basic bank declaration
bank regs {
    param register_size = 4;
    // USER-TODO: Add more register declarations here.  Usually use just one
    // line per register, containing size (optional), offset, any templates
    // implemented, and a short description. The default behaviour of registers
    // is a normal register behaviour where a read returns the last written
    // value. Use the unimpl template for registers that you haven't yet
    // implemented.
    register arg1 @ 0x00 is (write) "Arg1";
    register arg2 @ 0x04 is (write) "Arg2";
    register operation @ 0x08 is (write) "Operation";
    register result @ 0x0C "Result";
}

// USER-TODO: add implement and port declarations here, if needed

// USER-TODO: add event declarations here, if needed

// USER-TODO: add common methods here, if needed

// USER-TODO: add templates here, if needed

// Implementation of registers
bank regs {
    register arg1 {
        method write(uint64 value) {
	if (operation.val==43){
            result.val = value + arg2.val;
}
	if (operation.val==45){
            result.val = value - arg2.val;
}
	if (operation.val==42){
            result.val = value * arg2.val;
}
            this.val = value;
        }

}
    register arg2 {
        method write(uint64 value) {
	if (operation.val==43){
            result.val = value + arg1.val;
}
	if (operation.val==45){
            result.val = value - arg1.val;
}
	if (operation.val==42){
            result.val = value * arg1.val;
}
            this.val = value;
        }
}
    register operation {
        method write(uint64 value) {

	if (value==43){
            result.val = arg1.val + arg2.val;
}
	if (value==45){
            result.val = arg1.val - arg2.val;
}
	if (value==42){
            result.val = arg1.val * arg2.val;
}
            this.val = value;

	
        }

        // Methods and fields go here. If there is nothing to add here, the
        // register block can be removed altogether.
    }
}

// USER-TODO: Add init() and post_init() methods here, if needed.
// init() will be run to set the empty state of the model, before any
// configuration or checkpointed attributes are set.  post_init() is run after
// all configuration attributes have been set.  This happens both when the
// initial configuration is set and when the configuration is loaded from a
// checkpoint.